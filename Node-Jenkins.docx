#Storing Secrets in Jenkins:
#EC2_SSH_KEY: Store the private SSH key for accessing the EC2 instance. Use credentials('EC2_SSH_KEY') to reference it in the pipeline.
#DB_PASSWORD: Store any sensitive data like database passwords or API keys in Jenkins secrets. Reference them using credentials('DB_PASSWORD') or other identifiers based on what you store.
#Setting Up Jenkins Secrets:
#Go to Jenkins Dashboard.
#Navigate to Manage Jenkins > Manage Credentials.
#Add a new SSH Username with private key credential for EC2_SSH_KEY or a Secret Text for DB_PASSWORD.
#Use these credentials in the Jenkinsfile as shown above.





pipeline {
    agent any  // Run the pipeline on any available agent

    environment {
        EC2_SSH_HOST = 'your-ec2-ip-or-hostname'  // EC2 instance IP or hostname
        EC2_SSH_USER = 'ubuntu'  // EC2 SSH user (adjust if using different user)
        EC2_SSH_KEY = credentials('EC2_SSH_KEY')  // Load the SSH private key from Jenkins credentials
        DB_PASSWORD = credentials('DB_PASSWORD')  // Load the database password from Jenkins credentials
        REMOTE_DIR = '/var/www/node-app'  // Directory on EC2 where the app will be deployed
        GIT_REPO_URL = 'https://github.com/your-repository/node-app.git'  // Your Git repository URL
        NODE_VERSION = '14.x'  // Define the Node.js version (adjust if needed)
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Checkout the code from your Git repository
                git url: "${GIT_REPO_URL}", branch: 'main'
            }
        }

        stage('Install SSH Client') {
            steps {
                // Install the SSH client on the Jenkins agent (only necessary if SSH is not installed)
                sh 'sudo apt-get update && sudo apt-get install -y sshpass'
            }
        }

        stage('Install Node.js and NPM') {
            steps {
                // Install Node.js and NPM on the Jenkins agent (if not already installed)
                sh """
                    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION} | sudo -E bash -
                    sudo apt-get install -y nodejs
                    sudo apt-get install -y build-essential  // Install necessary build tools
                """
            }
        }

        stage('Install App Dependencies') {
            steps {
                // Install the app dependencies using NPM
                sh 'npm install'
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    // Use SSH to connect to the EC2 instance and deploy the Node.js app
                    sh """
                        ssh -o StrictHostKeyChecking=no -i ${EC2_SSH_KEY} ${EC2_SSH_USER}@${EC2_SSH_HOST} '
                        cd ${REMOTE_DIR} || git clone ${GIT_REPO_URL} ${REMOTE_DIR}
                        cd ${REMOTE_DIR}
                        git pull  # Pull the latest code
                        cp .env.example .env  # Copy the example .env file (adjust if needed)
                        echo "DB_PASSWORD=${DB_PASSWORD}" >> .env  # Inject the DB_PASSWORD from secrets into .env
                        npm install  # Install dependencies
                        npm run build  # Build the app (if necessary)
                        pm2 restart app  # Restart the Node.js application (assuming pm2 is used to manage the app)
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Deployment failed!"
        }
    }
}
